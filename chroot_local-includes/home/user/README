                        ***************************************
                        ***************************************
                        ** Project Jamie - Quick Start Guide **
                        ***************************************
                        ***************************************

        Welcome to Project Jamie, and thank you for trying out our distribution.  Currently,
we're in a pre-alpha release stage, and we're often adding new features and improving old
ones.  This guide is intended to be a short "quick start guide" and is by no means a complete
documentation.

In this guide we'll quickly cover a few simple topics:

        - Setting up your cluster
        - Compiling and running your first MPI program
        - Running a benchmark on your cluster using John the Ripper MPI

***************************
***************************
**Setting Up Your Cluster**
***************************

        After booting all of your nodes, you will find yourself on each node in the home 
directory, just as you would in other linux distributions.  Setting up your master nodes 
and worker nodes is a simple and painless process where you will pass arguments to a single 
script called "configurejamie."


** Configuring the Master Node ** 

        The first thing you will need to decide is which node you would like to be your 
master, node.  For simplicity's sake, you may find it easiest to choose the most powerful 
node at your disposal.

        Once you have chosen a node to be the master, you will type the following command:
        
                configurejamie master

        This command will add the master to the "nodes" list, and it will print the ip address 
of the node to the screen. This address is important for setting up the worker nodes.  The 
command should finish quickly.  Assuming all went well, congratulations, you've just set up your
first node!


** Configuring the Worker Nodes **

        After the configuration of the master/head node is complete, setting up the workers is 
easy as well.  Run the following command, replacing IP_ADDRESS_OF_MASTER with the correct IP address:

                configurejamie worker IP_ADDRESS_OF_MASTER
                
        This will ssh into the master node, append the worker's ip address to the nodes list, and 
mount the master's home directory as an nfs drive.  You'll receive a message stating that the 
node is ready after all of these tasks are done.

** Testing Your Configuration **

	Another simple command is provided for you to allow for quick testing of your cluster.
This command will simply list all of the processors on all the nodes of your cluster. In order
to do this, you simply run the following command on your master node:

		listnodes


************************************************
************************************************
**Compiling and Running Your First MPI Program**
************************************************

        Included in the home directory of each node is a file called "hello.c".  This file
contains the code for a simple "Hello, World" program that will utilize mpi. The following command
will compile the code:
		
		mpicc hello.c -o hello

	To run the program after compiling, run the following, replacing NUMBER_OF_PROCESSES with
the desired number of processes:

		mpiexec -f nodes -np NUMBER_OF_PROCESSES ./hello

	Assuming everything goes as planned, you've just compiled and run your first MPI program!


*****************************************
*****************************************
**Benchmarking With John the Ripper MPI**
*****************************************

	A program included in the distribution is John the Ripper (JtR) patched to utilize MPI.
JtR is a program that allows for brute-forcing of password hashes.  One feature of JtR is it's
usefulness as a benchmark.  JtR sees very linear increases in speed as more nodes are added to
the cluster, so the benchmark is only good for other processor dependent programs. Run the
following command to benchmark your cluster with JtR, replacing NUMBER_OF_PROCESSES with the
desired number of processes:

		mpiexec -f nodes -np NUMBER_OF_PROCESSES john -test
